"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleCarousel = void 0;
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
const Indicator_1 = require("./Indicator");
const MARGIN = 12;
const INSET = -15;
function SimpleCarousel({ data, renderItem }) {
    const scrollX = (0, react_1.useRef)(new react_native_1.Animated.Value(0)).current;
    const [itemWidth] = (0, react_1.useState)(react_native_1.Dimensions.get('screen').width);
    const [dataIndex, setDataIndex] = (0, react_1.useState)(0);
    (0, react_1.useEffect)(() => {
        scrollX.addListener(event => {
            const newIndex = Math.round(Math.abs(event.value / itemWidth));
            setDataIndex(newIndex);
        });
        return () => {
            scrollX.removeAllListeners();
        };
    }, [scrollX]);
    return (react_1.default.createElement(react_native_1.View, { style: {
            width: '100%',
        } },
        react_1.default.createElement(react_native_1.Animated.ScrollView, { horizontal: true, style: {
                backgroundColor: 'transparent',
                padding: 0,
                margin: 0,
            }, contentContainerStyle: [
                {
                    paddingHorizontal: react_native_1.Platform.OS === 'android' ? MARGIN + INSET : 0,
                },
            ], contentInset: {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
            }, contentOffset: {
                x: 0,
                y: 0,
            }, snapToInterval: itemWidth, showsHorizontalScrollIndicator: false, scrollEventThrottle: 16, snapToAlignment: "center", decelerationRate: "fast", pagingEnabled: true, onScroll: react_native_1.Animated.event([
                {
                    nativeEvent: {
                        contentOffset: { x: scrollX },
                    },
                },
            ], {
                useNativeDriver: true,
            }), bounces: false, alwaysBounceHorizontal: false, alwaysBounceVertical: false }, data.map((item, i) => (react_1.default.createElement(react_native_1.View, { key: `simple_carousel_item_key_${i}`, style: {
                margin: MARGIN,
            } }, renderItem(item, i, itemWidth - MARGIN * 2))))),
        react_1.default.createElement(Indicator_1.Indicator, { data: data, currentIndex: dataIndex, lastIndex: data.length - 1 })));
}
exports.SimpleCarousel = SimpleCarousel;
